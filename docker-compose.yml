version: '3.9'

networks:
  db-network:
  my-network:

services:
  db:
    image: mongo
    container_name: mongo_db
    restart: always
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo-data:/data/db
    networks:
      - db-network

  db-client:
    image: mongo-express
    container_name: mongo_db_ui_mode
    restart: always
    ports:
      - 8081:8081
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - ME_CONFIG_MONGODB_URL=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@db:27017/
    depends_on:
      - db
    networks:
      - db-network

  backend:
    build:
      context: ./backend_golang
      dockerfile: Dockerfile
    image: golang_compose_image:v1
    container_name: golang_server
    environment:
      - MONGODB_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@db:27017/
      - DB_NAME=${DB_NAME}
      - MONGODB_COLLECTION_NAME=${MONGODB_COLLECTION_NAME}
      - SERVER_PORT=${SERVER_PORT}
      - DB_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - DB_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - LOG_FILE_PATH=${LOG_FILE_PATH}
    ports:
      - "8080:8080"
    depends_on:
      - db
    networks:
      - db-network
      - my-network

  react-app:
    build:
      context: ./frontend_reactjs
      dockerfile: Dockerfile
    image: reactjs_compose_image:v1
    container_name: reactjs_client
    environment:
      - VARIABLE_IMAGE_PATH=${VARIABLE_IMAGE_PATH}
      - VARIABLE_URL=${VARIABLE_URL}
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - my-network

volumes:
  mongo-data: